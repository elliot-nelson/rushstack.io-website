"use strict";(self.webpackChunkrushstack_io=self.webpackChunkrushstack_io||[]).push([[20334],{50158:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return d}});var s=n(46393);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},i=Object.keys(e);for(s=0;s<i.length;s++)n=i[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(s=0;s<i.length;s++)n=i[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=s.createContext({}),p=function(e){var t=s.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=p(e.components);return s.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},f=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),f=p(n),d=r,h=f["".concat(c,".").concat(d)]||f[d]||u[d]||i;return n?s.createElement(h,o(o({ref:t},l),{},{components:n})):s.createElement(h,o({ref:t},l))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=f;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:r,o[1]=a;for(var p=2;p<i;p++)o[p]=n[p];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}f.displayName="MDXCreateElement"},30893:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return l},default:function(){return f}});var s=n(74834),r=n(28265),i=(n(46393),n(50158)),o=["components"],a={title:'"copy-static-assets" task'},c=void 0,p={unversionedId:"heft_tasks/copy-static-assets",id:"heft_tasks/copy-static-assets",isDocsHomePage:!1,title:'"copy-static-assets" task',description:"This task supplements the TypeScript transpiler by copying asset files into the output folder, so that they can be imported by .js files.",source:"@site/docs/heft_tasks/copy-static-assets.md",sourceDirName:"heft_tasks",slug:"/heft_tasks/copy-static-assets",permalink:"/rushstack.io/pages/heft_tasks/copy-static-assets",editUrl:"https://github.com/microsoft/rushstack.io-website/docs/heft_tasks/copy-static-assets.md",tags:[],version:"current",frontMatter:{title:'"copy-static-assets" task'},sidebar:"docsSidebar",previous:{title:'"copy-files" task',permalink:"/rushstack.io/pages/heft_tasks/copy-files"},next:{title:'"delete-globs" task',permalink:"/rushstack.io/pages/heft_tasks/delete-globs"}},l=[{value:"When to use it",id:"when-to-use-it",children:[],level:2},{value:"package.json dependencies",id:"packagejson-dependencies",children:[],level:2},{value:"Config files",id:"config-files",children:[],level:2}],u={toc:l};function f(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,s.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This task supplements the TypeScript transpiler by copying asset files into the output folder, so that they can be imported by .js files."),(0,i.kt)("h2",{id:"when-to-use-it"},"When to use it"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"copy-static-assets")," task is used when source files need to reference asset files using ",(0,i.kt)("inlineCode",{parentName:"p"},"import")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"require()"),".  For example, a React project may have a file that loads an ",(0,i.kt)("strong",{parentName:"p"},"src/styles.css")," asset like this:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"src/index.tsx")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import './styles.css';\n\n. . .\n")),(0,i.kt)("p",null,"In Heft's standard configuration, the TypeScript compiler reads ",(0,i.kt)("strong",{parentName:"p"},"src/","*","*","/.ts")," inputs and writes ",(0,i.kt)("strong",{parentName:"p"},"lib/","*","*","/.js")," outputs.  When Webpack is invoked on ",(0,i.kt)("strong",{parentName:"p"},"lib/index.js"),", it will process the resulting ",(0,i.kt)("inlineCode",{parentName:"p"},'require("./styles.css");')," and expect to bundle the file path ",(0,i.kt)("strong",{parentName:"p"},"lib/styles.css")," (instead of ",(0,i.kt)("strong",{parentName:"p"},"src/styles.css")," as in the TypeScript code)."),(0,i.kt)("h2",{id:"packagejson-dependencies"},"package.json dependencies"),(0,i.kt)("p",null,"None - this feature is implemented internally by Heft."),(0,i.kt)("h2",{id:"config-files"},"Config files"),(0,i.kt)("p",null,"Continuing the above example, we can copy the ",(0,i.kt)("inlineCode",{parentName:"p"},"styles.css")," file using the ",(0,i.kt)("inlineCode",{parentName:"p"},'"staticAssetsToCopy"'),"setting in ",(0,i.kt)("a",{parentName:"p",href:"../heft_configs/typescript_json"},"typescript.json"),".  For example:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"<","project folder",">","/config/typescript.json")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'  . . .\n\n  /**\n   * Configures additional file types that should be copied into the TypeScript compiler\'s emit folders, for example\n   * so that these files can be resolved by import statements.\n   */\n  "staticAssetsToCopy": {\n    /**\n     * File extensions that should be copied from the src folder to the destination folder(s).\n     */\n    // "fileExtensions": [\n    //   ".json", ".css"\n    // ],\n\n    "fileExtensions": [\n      ".css"\n    ],\n\n    /**\n     * Glob patterns that should be explicitly included.\n     */\n    // "includeGlobs": [\n    //   "some/path/*.js"\n    // ],\n\n    /**\n     * Glob patterns that should be explicitly excluded. This takes precedence over globs listed\n     * in "includeGlobs" and files that match the file extensions provided in "fileExtensions".\n     */\n    // "excludeGlobs": [\n    //   "some/path/*.css"\n    // ]\n  }\n\n. . .\n')))}f.isMDXComponent=!0}}]);